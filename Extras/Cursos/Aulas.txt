Curso de C#: Paralelismo no mundo real
	01 - Usando Threads
		01 - Introdução
		02 - Conhecendo o problema do cliente
		03 - Criando Threads
		04 - Usando o Thread.Start() (D)
		05 - Usando a propriedade IsAlive e a Thread
		06 - Usando o Thread.Sleep() (B)
		07 - Usando o Thread.IsAlive (A)
		08 - Criando Threads
	02 - Usando Tasks
		01 - Abstraindo tarefas
		02 - Criando e executando Tasks
		03 - Tasks vs. Threads (A)
		04 - Mantendo a interface gráfica ativa
		05 - Encadeando tarefas (B)
		06 - Problemas ao acessar a interface gráfica da forma errada (D)
		07 - Usando o TaskScheduler
	03 - Usando o AsyncAwait do C#
		01 - Tasks com retorno
		02 - Usando AsyncAwait
		03 - SyncronizationContext (B)
		04 - Entendendo melhor o Async
		05 - Retorno de tarefas (C)
		06 - O compilador e o Async/Await (A)
		07 - Usando Async/Await
	04 - Padrões de notificação de progresso de tarefas
		01 - Criando uma barra de progresso
		02 - Reportando progresso ao usuário
		03 - Como reportar progresso (B)
		04 - Reportando com Progress
		05 - Contexto de sincronização de Progress<T> (C)
		06 - Reportando progresso no ByteBank
	05 - Criando tarefas canceláveis
		01 - Conhecendo pattern .NET para cancelamento
		02 - Dando a opção de cancelar ao usuário
		03 - Usando o CancellationTokenSource e o CancellationToken
		04 - Exceção de cancelamento (D)
		05 - Quando lançar exceções de cancelamento (C)
		06 - Passando o CancellationToken adiante
		07 - Obtendo CancellationToken de um CancellationTokenSource (A)
		08 - Conclusão
		09 - Usando o CTS e o CT
Curso de C#: Eventos, Delegates e Lambda
	01 - Comportamentos e Eventos
		01 - Introdução
		02 - Nosso projeto inicial
		03 - Comportamento em nossos elementos
		04 - Comportamento de controles (A)
		05 - Classes especializadas (A / B / C)
		06 - Usando Eventos do dotNET
		07 - O que aprendemos?
		08 - Consolidando seu conhecimento
	02 - Delegates
		01 - Projeto da aula anterior
		02 - Usando delegates
		03 - Respeitando assinaturas de delegate
		04 - Entre eventos e delegates (A / B)
		05 - Criando a janela de edição
		06 - Assinando eventos mais de uma vez
		07 - Mais manipulações de métodos
		08 - Combinando delegates (B)
		09 - O que aprendemos?
		10 - Consolidando seu conhecimento
	03 - Manipulando Delegates
		01 - Projeto da aula anterior
		02 - Usando métodos anônimos para criar delegates
		03 - Métodos anônimos (B)
		04 - Contravariância em delegates
		05 - Usando expressões lambdas
		06 - Validando campo de texto
		07 - Construindo delegates dinamicamente
		08 - Usando o parâmetro sender
		09 - Debugando métodos anônimos (B)
		10 - O que aprendemos?
		11 - Consolidando seu conhecimento
	04 - Funções e nosso próprio evento
		01 - Projeto da aula anterior
		02 - Usando funções
		03 - Criando funções (A)
		04 - Simplificando a sintaxe de funções
		05 - Criando um campo de validação customizado
		06 - O Delegate e Evento de validação
		07 - Criando Delegates (A / C / D)
		08 - Executando nossos eventos
		09 - O que aprendemos?
		10 - Consolidando seu conhecimento
	05 - Avançando em Eventos
		01 - Projeto da aula anterior
		02 - Usando os metodos Add e Remove
		03 - Usando o GetExecutionList
		04 - Lista de delegates (A)
		05 - Usando boas praticas no OnValidacao
		06 - Criando nossos argumentos de evento
		07 - Convenções (A / C / D)
		08 - Consolidando seu conhecimento
		09 - O que aprendemos?
		10 - Projeto final do curso
		11 - Conclusão
Curso de C# Brasil: Formate datas, cpf e números nacionais
	01 - Validação e Formatação de CPF, CNPJ, Título de Eleitor
		01 - Introdução
		02 - Validando CPF
		03 - Validando CPF (C)
		04 - Validando CNPJ e Título Eleitoral
		05 - Validação de CNPJ (C)
		06 - Formatando Documentos
		07 - Idempotência do Format (C)
		08 - Validando CPF, CNPJ e Título de Eleitor
		09 - Projeto da Aula Atual
	02 - Trabalhando com Datas e Números por Extenso
		01 - Trabalhando com Datas e Horas
		02 - Formato de data no padrão brasileiro (B)
		03 - Formatos Simplificados de Datas e Horas
		04 - Exibição de Tempo (C)
		05 - Formato de Ida-e-Volta (C)
		06 - Números por Extenso
		07 - Valores em reais por extenso
		08 - Projeto da Aula Atual
	03 - Trabalhando com Dinheiro
		01 - Trabalhando com Dinheiro
		02 - Exibindo dinheiro (A)
		03 - Operações Com Decimal e Money (C)
		04 - Formatando dólar
		05 - Somando duas moedas diferentes (C)
		06 - Projeto da Aula Atual
	04 - Buscando CEP na internet
		01 - Consultando o Webservice do ViaCEP
		02 - Trabalhando com HttpClient para obter dados de serviço ViaCEP
		03 - Consultando ViaCEP Com Caelum Stella CSharp
		04 - A Classe ViaCEP (A)
		05 - Métodos Assíncronos (B)
		06 - Obtendo Partes do Endereço (A)
		07 - Projeto da Aula Atual
	05 - Aplicando o que aprendemos
		01 - Preparando o ambiente
		02 - Formatando Um Contrato de Trabalho
		03 - Variável string multi-linhas (B)
		04 - Interpolação de Strings (B)
		05 - Adicionando Mais Campos Ao Contrato
		06 - Data por extenso (A)
		07 - Inserindo Campos de Endereço e Dinheiro
		08 - Interpolando Campos do Endereço
		09 - Projeto da Aula Atual
		11 - Conclusão
Build de uma aplicação .NET: construindo seus projetos com MSBuild
	01 - O arquivo CSPROJ
		01 - Introdução
		02 - Objetivos do curso
		03 - [Obrigatório] Download do projeto
		04 - Sem Visual Studio
		05 - Objetivos da aula
		06 - Script
		07 - Arquivos .csproj
		08 - Faça como eu fiz na aula
		09 - Projeto da Luli (B)
		10 - Referências Utilizadas
		11 - Projeto atual
		12 - O que aprendemos?
	02 - Os 4 blocos fundamentais do MSBuild
		01 - Quatro blocos do MSBuild
		02 - Objetivos da aula
		03 - Tasks
		04 - Targets
		05 - Itens
		06 - Properties
		07 - Faça como eu fiz na aula
		08 - Fixando os blocos (B)
		09 - Referências Utilizadas
		10 - Projeto atual
		11 - O que aprendemos?
	03 - Reaproveitando projetos de build
		01 - Projeto inicial da aula
		02 - Reaproveitando projetos de build
		03 - Objetivos da aula
		04 - Importando projetos comuns
		05 - Convenções
		06 - Visual Studio e SDK do NET
		07 - Migrando para o SDK (A)
		08 - Referências Utilizadas
		09 - Faça como eu fiz na aula
		10 - Projeto atual
		11 - Antes de ir para a próxima aula...
		12 - O que aprendemos?
	04 - Compilando com diferentes objetivos
		01 - Objetivos da aula
		02 - Build incremental
		03 - Compilando para objetivos diferentes
		04 - Compilando para frameworks NET específicos
		05 - Associe os conceitos (B)
		06 - Faça como eu fiz na aula
		07 - O que aprendemos?
	05 - .NET Command Line Interface
		01 - Projeto inicial da aula
		02 - Objetivos da aula
		03 - Projeto AspNetCore
		04 - .NET CLI
		05 - CLI além do build
		06 - Relacionando pacotes e projetos (C)
		07 - Referências Utilizadas
		08 - Projeto atual
		09 - Faça como eu fiz na aula
		10 - O que aprendemos?
	06 - Empacotando a aplicação com Docker
		01 - [Pré-requisito] Conceitos de Docker
		02 - Compilando em uma máquina zerada
		03 - Componentes obrigatórios (A / C / D / E)
		04 - Objetivos da aula
		05 - Imagens .NET para Docker
		06 - Dockerfile
		07 - Faça como eu fiz na aula
		08 - Projeto final
		09 - O que aprendemos?
		10 - Conclusão
C#: aplique boas práticas de refatoração e torne seu código mais legível
	01 - Melhorando a legibilidade do código
		01 - Apresentação
		02 - Objetivos da aula
		03 - Apresentação do ambiente
		04 - Projeto inicial
		05 - Para saber mais: zoom no terminal embutido no Visual Studio Community 2022
		06 - Para saber mais: API - Documentação
		07 - Faça como eu fiz: extração de métodos
		08 - Nomes significativos
		09 - Parâmetro nomeado (A)
		10 - Para saber mais: parâmetros opcionais
		11 - Extração de classes
		12 - Faça como eu fiz: testes e refatoração
		13 - O que aprendemos?
	02 - Evitando código duplicado
		01 - Projeto da aula anterior
		02 - Objetivos da aula
		03 - Código duplicado na leitura de arquivo
		04 - Para saber mais: Boas práticas com lista de objetos e APIs
		05 - Faça como eu fiz: duplicidade de código
		06 - Para saber mais: Don't Repeat Yourself (DRY)
		07 - Resolvendo a documentação com atributos
		08 - Para saber mais: aplicando algumas diretrizes de design
		09 - Encapsulando (B / C)
		10 - Removendo duplicidade
		11 - Recuperando com Reflection
		12 - Estudo de caso: uso de atributos em projetos reais
		13 - O que aprendemos?
	03 - Padrões de Projeto e Command
		01 - Projeto da aula anterior
		02 - Objetivos da aula
		03 - Organizando o projeto em pastas
		04 - Faça como eu fiz: organizando o projeto em pastas
		05 - Para saber mais: hierarquia de pastas muito complexa
		06 - Identificando comportamentos comuns
		07 - Para saber mais: programação assíncrona com C#
		08 - Métodos síncronos e assíncronos (C)
		09 - Para saber mais: o que são padrões de projeto (design patterns)
		10 - Definindo comportamentos comuns (A / E)
		11 - Eliminando o Switch
		12 - Para saber mais: dicionário em C#
		13 - Desafio: classe ComandosDoSistema para encapsular a coleção de comandos do sistema
		14 - Estudo de caso: padrão Command em bibliotecas famosas
		15 - O que aprendemos?
	04 - Testes automatizados
		01 - Projeto da aula anterior
		02 - Objetivos da aula
		03 - Automatizando testes
		04 - Faça como eu fiz: adicionando projeto de testes a solução
		05 - Testando o HttpClientPet
		06 - Faça como eu fiz: testes unitários
		07 - Testando exceções
		08 - Teste uma exceção (B)
		09 - Nova refatoração com testes
		10 - Estudo de caso: bibliotecas realizam muitos testes!
		11 - Projeto da aula
		12 - O que aprendemos?
	05 - Desafios
		01 - Apresentando os desafios
		02 - Apresentando os desafios
		03 - Desafio 1
		04 - Resolução desafio 2
		05 - Desafio 2
		06 - Conclusão
C#: aprenda a criar testes limpos com boas práticas
	01 - Declarando dependências
		01 - Apresentação
		02 - Projeto inicial
		03 - Identificando dependência de classes
		04 - IHttpClientFactory
		05 - Sobre HttpClient (B)
		06 - Para saber mais: Microsoft recomenda IHttpClientFactory
		07 - Faça como eu fiz: instalando a biblioteca Moq via CLI
		08 - Simulando objetos com Moq
		09 - Usando a biblioteca Moq (A)
		10 - Testando API Fora do Ar
		11 - Testando API Fora do Ar
		12 - Desafio: criar testes de unidade para o leitor de arquivos
		13 - O que aprendemos?
	02 - Boas práticas em testes
		01 - Projeto da aula anterior
		02 - Problemas ao testar comandos
		03 - Um teste rápido
		04 - Para saber mais: testes limpos e o tal de F.I.R.S.T.
		05 - Leitor de arquivos no construtor
		06 - Teste de unidade no comando import
		07 - Data Builders
		08 - Desafio: criar testes de unidade para a importação de arquivo inexistente e criar o Data Builder para HttpClientPet
		09 - Faça como eu fiz: modificar o comando show para receber o leitor de arquivos
		10 - O que aprendemos?