C#: Testes de unidade e TDD com xUnit
	01 - Promovendo rápido feedback
		01 - Introdução
		02 - O sistema de leilões
		03 - Avaliando um leilão
		04 - Objetivos da aula
		05 - Estrutura de um teste automatizado
		06 - A biblioteca XUnit
		07 - Encontre o erro (C / D / E)
		08 - Consolidando seus conhecimentos
		09 - Projeto atual
		10 - Referências Utilizadas
		11 - O que aprendemos?
	02 - Organizando seus testes
		01 - Escrevendo mais testes
		02 - Objetivos da aula
		03 - O que devo testar
		04 - Leilão sem lances
		05 - Teorizando com xUnit
		06 - Teorias e dados (C)
		07 - Outros dados (C)
		08 - Nomenclatura
		09 - Consolidando seus conhecimentos
		10 - Projeto atual
		11 - Referências Utilizadas
		12 - Para saber mais: outras formas de enviar dados
		13 - O que aprendemos?
	03 - Não deixe o sistema regredir
		01 - Manutenção dos testes
		02 - Objetivos da aula
		03 - Testando leilões com período antes do pregão (A)
		04 - Convenção de nomes (B)
		05 - [Errata] Nome da classe de teste
		06 - Novos testes a cada funcionalidade
		07 - Praticando TDD
		08 - Melhorando nosso código
		09 - Consolidando os conhecimentos
		10 - Projeto atual
		11 - Referências Utilizadas
		12 - O que aprendemos?
	04 - Testando todos os comportamentos
		01 - Terminando leilão sem pregão
		02 - Objetivos da aula
		03 - Exceções com xUnit
		04 - ArgumentException (B)
		05 - Testando outra exceção
		06 - Consolidando os conhecimentos
		07 - Projeto atual
		08 - Referências Utilizadas
		09 - O que aprendemos?
	05 - Ajudando no design do código
		01 - Outra forma de avaliar o leilão
		02 - Objetivos da aula
		03 - Testes ajudam o design
		04 - Estratégia de avaliação
		05 - Inversão de dependência
		06 - Consolidando os conhecimentos
		07 - Projeto final
		08 - Referências Utilizadas
		09 - Conclusão
		10 - Fixando os conceitos (B)
		11 - O que aprendemos?
Mocks em C#: Testes de Integração com xUnit e Moq
	01 - Testes de Integração
		01 - Introdução
		02 - Objetivos do curso
		03 - Objetivos da aula
		04 - Preparando o Ambiente
		05 - [OBRIGATÓRIO] Projeto inicial
		06 - Testando recursos caros
		07 - Dependência ou Morte
		08 - Primeiro Passo (A)
		09 - Recapitulando
		10 - Faça o que eu fiz na aula
		11 - Projeto atual
		12 - O que aprendemos?
	02 - Dependências mais leves e rápidas
		01 - Objetivos da aula
		02 - InMemoryDatabase
		03 - Para usar InMemoryDatabase (B)
		04 - Massas de Dados
		05 - Recapitulando
		06 - Faça o que eu fiz na aula
		07 - Projeto atual
		08 - O que aprendemos?
	03 - Injetando dados para cenários complexos
		01 - Objetivos da aula
		02 - Lançando exceções
		03 - Setup da exceção
		04 - Erro no banco de dados (B)
		05 - Recapitulando
		06 - Faça o que eu fiz na aula
		07 - Projeto atual
		08 - O que aprendemos?
	04 - Testando o comportamento de seu sistema
		01 - Objetivos da aula
		02 - O método foi chamado
		03 - Outro exemplo
		04 - Recapitulando
		05 - Fakes, Stubs e Mocks (C)
		06 - Faça o que eu fiz na aula
		07 - Projeto atual
		08 - O que aprendemos?
	05 - Verificando efeitos colaterais
		01 - Objetivos da aula
		02 - Mensagens de log
		03 - Extraindo pra capturar
		04 - Superando a limitação do Moq
		05 - Conhecendo uma API
		06 - Recapitulando
		07 - O que estou verificando? (A)
		08 - Faça o que eu fiz na aula
		09 - Projeto atual
		10 - O que aprendemos?
	06 - Aplicando em controladores AspNet Core
		01 - Objetivos da aula
		02 - Aplicando no AspNet Core
		03 - Testando exceções
		04 - Fixando os conhecimentos (A)
		05 - Para Saber Mais: Livro xUnit Test Patterns
		06 - Faça o que eu fiz na aula
		07 - O que aprendemos?
		08 - Projeto final
		09 - Conclusão