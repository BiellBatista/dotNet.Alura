.NET: gerenciamento de memória para otimização de performance
	01 - Entendendo referências
		01 - Apresentação
		02 - Projeto inicial do curso
		03 - Atribuição de valores
		04 - Faça como eu fiz: atribuindo os retornos de métodos
		05 - Retorno de métodos (B)
		06 - Stack e Heap
		07 - Onde fica armazenado? (A)
		08 - O que aprendemos?
	02 - Lists e LinkedLists
		01 - Projeto da aula anterior
		02 - Inserções em Lists
		03 - Custo de inserção em Lists (B)
		04 - Faça como eu fiz: avaliando Lists
		05 - Conhecendo LinkedLists
		06 - Características de LinkedLists (C & D)
		07 - Lists vs LinkedLists
		08 - Apontamentos na memória (A & D)
		09 - O que aprendemos?
	03 - Conhecendo Structs
		01 - Projeto da aula anterior
		02 - A primeira Struct
		03 - Faça como eu fiz: criando a primeira Struct
		04 - Structs e suas características
		05 - Otimização de memória: Struct vs Classe (A)
		06 - Avaliando Structs
		07 - Limitações das Structs (C)
		08 - O que aprendemos?
	04 - Conhecendo Records
		01 - Projeto da aula anterior
		02 - O primeiro Record
		03 - Faça como eu fiz: criando o primeiro Record
		04 - Características de Records (C & D)
		05 - Records e imutabilidade
		06 - Averiguando a imutabilidade (B)
		07 - Records e equalidade
		08 - Records e seus métodos (B)
		09 - O que aprendemos?
	05 - Conhecendo Record Structs
		01 - Projeto da aula anterior
		02 - O primeiro Record Struct
		03 - Benefícios das Record Structs (A, B & D)
		04 - Desempenho de Record Structs (C)
		05 - Imutabilidade e performance
		06 - Record Structs e imutabilidade (C)
		07 - Faça como eu fiz: avaliando a performance geral
		08 - Projeto final do curso
		09 - O que aprendemos?
		10 - Conclusão
C# Reflection: manipule dinamicamente tipos e assemblies
	01 - Preenchendo objetos dinamicamente
		01 - Apresentação
		02 - Preparando o ambiente
		03 - Lendo arquivo de boletos
		04 - Para saber mais: Reflection - Olhando o código sob o capô
		05 - Criando instância dinamicamente
		06 - Acessando propriedades dinamicamente
		07 - Utilização de Reflection em C# (C)
		08 - Faça como eu fiz: adicionando uma nova coluna no arquivo de boletos
		09 - O que aprendemos?
	02 - Lendo objetos dinamicamente
		01 - Projeto da aula anterior
		02 - Agrupando boletos
		03 - Lendo valor de propriedade
		04 - Atributos customizados
		05 - Lendo atributos
		06 - Utilização de atributos Custom em C# (C)
		07 - Para saber mais: explorando atributos customizados em C#
		08 - Faça como eu fiz: criando atributo para o relatório
		09 - O que aprendemos?
	03 - Construtores e métodos
		01 - Projeto da aula anterior
		02 - Investigando construtores
		03 - Parâmetros do construtor
		04 - Executando métodos dinamicamente
		05 - A finalidade de se utilizar Reflection (D)
		06 - Faça como eu fiz: invocando construtor com 2 parâmetros
		07 - Para saber mais: C# Reflection e performance
		08 - O que aprendemos?
	04 - Investigando assemblies
		01 - Projeto da aula anterior
		02 - Obtendo Assembly
		03 - Carregando tipos do Assembly
		04 - Para saber mais: obtendo o tipo Assembly
		05 - Filtrando tipos por metadados
		06 - Arquitetura baseada em plugins com Reflection em C# (C)
		07 - Faça como eu fiz: implementando novo relatório JSON
		08 - O que aprendemos?
	05 - Arquitetura de plugins
		01 - Projeto da aula anterior
		02 - Implementando gerador de documentos
		03 - A estrutura de plugins
		04 - Executando método em Assembly externo
		05 - Gerenciamento de plugins com Reflection (B)
		06 - Para saber mais: a tecnologia de plugins em softwares populares
		07 - Faça como eu fiz: adicionando novo plugin da consultoria XPTO
		08 - Projeto final do curso
		09 - O que aprendemos?
		10 - Conclusão
C# e Exceções: construa aplicações resilientes
	01 - Conhecendo exceções
		01 - Apresentação
		02 - Projeto inicial do curso
		03 - Provocando uma exceção
		04 - Entendendo a pilha de execução
		05 - Lidando com exceções
		06 - Ordem de execução (A)
		07 - Onde inserir o Try-Catch? (A)
		08 - Capturando erros aritméticos (A & B)
		09 - Faça como eu fiz: capturando uma NullReferenceException
		10 - O que aprendemos?
	02 - Exceções na ADOPET API
		01 - Projeto da aula anterior
		02 - Capturando exceções
		03 - Alterando a resposta para o usuário
		04 - Tornando respostas consistentes
		05 - Identificando a abordagem inadequada (A)
		06 - Personalizando mensagens de erro na API (C)
		07 - Faça como eu fiz: tratando exceções na API
		08 - O que aprendemos?
	03 - Lançando exceções
		01 - Projeto da aula anterior
		02 - Adicionando novas regras
		03 - Exceções customizadas
		04 - Utilizando o operador when
		05 - Tratando múltiplas exceções (A & C)
		06 - Exceções na prática (A)
		07 - Faça como eu fiz: lançando exceções na aplicação
		08 - O que aprendemos?
	04 - Hierarquia de exceções
		01 - Projeto da aula anterior
		02 - Exceções e suas hierarquias
		03 - Exceções e polimorfismo
		04 - Exceções aninhadas
		05 - Revisando o código de estoque (A)
		06 - Validando saldo (B)
		07 - Faça como eu fiz: criando nossa exceção aninhada
		08 - O que aprendemos?
	05 - Boas práticas
		01 - Projeto da aula anterior
		02 - Criando um IExceptionHandler
		03 - Lidando com exceções globalmente
		04 - Tratando exceções de forma global (A)
		05 - Tratando exceções de forma personalizada (B)
		06 - Faça como eu fiz: usando um ExceptionHandler
		07 - Projeto final do curso
		08 - O que aprendemos?
		09 - Conclusão
		10 - Créditos
C# Async: aplique recursos de programação assíncrona em seu projetos
	01 - Threads
		01 - Apresentação
		02 - Projeto inicial do curso
		03 - Código síncrono
		04 - Criando uma Thread
		05 - Faça como eu fiz: criando uma Thread
		06 - Múltiplas Threads
		07 - Para saber mais: programação MultiThread
		08 - Para saber mais: Pool de Threads
		09 - Utilizando Threads (C)
		10 - O que aprendemos?
	02 - Tasks
		01 - Projeto da aula anterior
		02 - Definindo uma Task
		03 - Tasks que retornam valor
		04 - Tasks que retornam valor (A)
		05 - Para saber mais: sincronizando tarefas com WaitAll e WhenAll
		06 - Tratando exceções
		07 - Faça como eu fiz: tratando exceções em tarefas
		08 - O que aprendemos?
	03 - Async e Await
		01 - Projeto da aula anterior
		02 - Async/Await
		03 - Async void
		04 - Utilizando async/await em Programação Assíncrona (C)
		05 - Cancelando uma tarefa
		06 - Faça como eu fiz: cancelando tarefas com CancellationToken
		07 - Sincronizando tarefas
		08 - Para saber mais: Lock e SemaphoreSlim
		09 - Mão na massa: Task para leitura de voos de um arquivo Json
		10 - O que aprendemos?
	04 - Consumindo uma API de forma assíncrona
		01 - Projeto da aula anterior
		02 - Preparando o ambiente: adicionando um projeto de API
		03 - Acessando APIs externa de Forma Assíncrona
		04 - Classe de consumo da API
		05 - Para saber mais: o que é uma API?
		06 - Para saber mais: API REST
		07 - Consumindo a API
		08 - Utilizando async/await em Programação Assíncrona (E)
		09 - Programação async em aplicações Web
		10 - Faça como eu fiz: criando um Endpoint Assíncrono em uma Minimal API para consulta por ID
		11 - O que aprendemos?
	05 - Boas práticas e refatorações
		01 - Projeto da aula anterior
		02 - Conselhos e informações
		03 - Para saber mais: boas práticas na programação assíncrona
		04 - CancellationToken
		05 - Faça como eu fiz: refatorando o Endpoint para suportar cancelamento com CancellationToken
		06 - Cancelando funções assíncronas em uma Minimal API (A)
		07 - Simulando o cancelamento
		08 - Projeto final do curso
		09 - Para ir mais fundo
		10 - O que aprendemos?
		11 - Conclusão
C#: Eventos, Delegates e Lambdas
	01 - Delegates
		01 - Apresentação
		02 - Preparando o ambiente: projeto inicial
		03 - Criando e usando delegates
		04 - Delegates vs Métodos anônimos
		05 - Delegates multicast
		06 - Mão na massa: usando delegates multicast
		07 - Para saber mais: delegates padrão em C#
		08 - Delegates multicast (C)
		09 - O que aprendemos?
	02 - Introdução a eventos
		01 - Projeto da aula anterior
		02 - Criando e invocando eventos
		03 - Eventos de interface
		04 - Eventos personalizados
		05 - Para saber mais: eventos e o Pattern Observer
		06 - Faça como eu fiz: eventos personalizados
		07 - Notificações de saldo insuficiente (C)
		08 - O que aprendemos?
	03 - Eventos em formulários e controles
		01 - Projeto da aula anterior
		02 - Eventos em Windows Forms
		03 - Eventos de formulário
		04 - Eventos de caixa eletrônico
		05 - Para saber mais: argumentos de eventos
		06 - Faça como eu fiz: adicionando eventos aos botões
		07 - Eventos (B)
		08 - O que aprendemos?
	04 - Introdução a Lambdas
		01 - Projeto da aula anterior
		02 - Comparando expressões Lambda com delegates
		03 - Lambdas de expressão, Lambdas de instrução
		04 - Action e Func
		05 - Cálculo de comissão de imobiliária (C)
		06 - Mão na massa: refatorando o caixa eletrônico
		07 - Para saber mais: Action e Func em C#
		08 - O que aprendemos?
	05 - Lambdas assíncronos e LINQ
		01 - Projeto da aula anterior
		02 - Lambdas assíncronos
		03 - LINQ com sintaxe de consulta
		04 - LINQ com sintaxe de método
		05 - Consultas LINQ (A)
		06 - Para saber mais: LINQ
		07 - Faça como eu fiz: atualizando a lógica de busca de contas
		08 - Projeto final do curso
		09 - Para ir mais fundo
		10 - O que aprendemos?
		11 - Conclusão